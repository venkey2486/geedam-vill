{"ast":null,"code":"import Axios from \"axios\";\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_FAIL } from \"../constants/orderConstants\";\n\nconst createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST,\n      payload: order\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data: {\n        data: newOrder\n      }\n    } = await Axios.post(\"/api/orders\", order, {\n      headers: {\n        Authorization: ' Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: newOrder\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsOrder = orderId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST,\n      payload: orderId\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get(\"/api/orders/\" + orderId, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst payOrder = (order, paymentResult) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_PAY_REQUEST,\n      payload: paymentResult\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.put(\"/api/orders/\" + order._id + \"/pay\", paymentResult, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { createOrder, detailsOrder, payOrder };","map":{"version":3,"sources":["D:/Amazona/frontend/src/actions/orderActions.js"],"names":["Axios","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAIL","createOrder","order","dispatch","getState","type","payload","userSignin","userInfo","data","newOrder","post","headers","Authorization","token","error","message","detailsOrder","orderId","get","payOrder","paymentResult","put","_id"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport {\r\n  ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL,\r\n\r\n  ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_FAIL\r\n} from \"../constants/orderConstants\";\r\n\r\nconst createOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ORDER_CREATE_REQUEST, payload: order });\r\n    const { userSignin: { userInfo } } = getState();\r\n    const { data: { data: newOrder } } = await Axios.post(\"/api/orders\", order, {\r\n      headers: {\r\n        Authorization: ' Bearer ' + userInfo.token\r\n      }\r\n    });\r\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: newOrder });\r\n  } catch (error) {\r\n    dispatch({ type: ORDER_CREATE_FAIL, payload: error.message });\r\n  }\r\n}\r\n\r\nconst detailsOrder = (orderId) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ORDER_DETAILS_REQUEST, payload: orderId });\r\n    const { userSignin: { userInfo } } = getState();\r\n    const { data } = await Axios.get(\"/api/orders/\" + orderId, {\r\n      headers:\r\n        { Authorization: 'Bearer ' + userInfo.token }\r\n    });\r\n    dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({ type: ORDER_DETAILS_FAIL, payload: error.message });\r\n  }\r\n}\r\n\r\nconst payOrder = (order, paymentResult) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: ORDER_PAY_REQUEST, payload: paymentResult });\r\n    const { userSignin: { userInfo } } = getState();\r\n    const { data } = await Axios.put(\"/api/orders/\" + order._id + \"/pay\", paymentResult, {\r\n      headers:\r\n        { Authorization: 'Bearer ' + userInfo.token }\r\n    });\r\n    dispatch({ type: ORDER_PAY_SUCCESS, payload: data })\r\n  } catch (error) {\r\n    dispatch({ type: ORDER_PAY_FAIL, payload: error.message });\r\n  }\r\n}\r\nexport { createOrder, detailsOrder,payOrder };"]},"metadata":{},"sourceType":"module"}